Navratna DevFlow - Complete Project Structure
==============================================

devflow-gemini/
â”‚
â”œâ”€â”€ .github/
â”‚   â”œâ”€â”€ workflows/
â”‚   â”‚   â””â”€â”€ orchestrator.yml                          # Reusable workflow (entry point)
â”‚   â”‚
â”‚   â”œâ”€â”€ actions/
â”‚   â”‚   â””â”€â”€ run-gemini-orchestrator/
â”‚   â”‚       â”œâ”€â”€ action.yml                            # Composite action (core logic)
â”‚   â”‚       â””â”€â”€ seed/
â”‚   â”‚           â””â”€â”€ ops/
â”‚   â”‚               â”œâ”€â”€ prompts/
â”‚   â”‚               â”‚   â””â”€â”€ navratna_orchestrator.md  # Default AI prompt template
â”‚   â”‚               â””â”€â”€ out/
â”‚   â”‚                   â””â”€â”€ .gitkeep                  # Placeholder for outputs
â”‚   â”‚
â”‚   â”œâ”€â”€ labels.json                                   # Label schema (programmatic)
â”‚   â”œâ”€â”€ PULL_REQUEST_TEMPLATE.md                      # PR template
â”‚   â””â”€â”€ CODEOWNERS                                    # Code ownership
â”‚
â”œâ”€â”€ scripts/
â”‚   â””â”€â”€ bootstrap.sh                                  # One-command setup automation (executable)
â”‚
â”œâ”€â”€ examples/
â”‚   â”œâ”€â”€ devflow-consumer.yml                          # Example: Consumer workflow
â”‚   â””â”€â”€ custom-prompt-example.md                      # Example: Customization guide
â”‚
â”œâ”€â”€ docs/
â”‚   â”œâ”€â”€ ARCHITECTURE.md                               # Technical architecture & design
â”‚   â”œâ”€â”€ TROUBLESHOOTING.md                            # Common issues & solutions
â”‚   â””â”€â”€ VERSIONING.md                                 # Version management & upgrades
â”‚
â”œâ”€â”€ README.md                                         # Main documentation (start here!)
â”œâ”€â”€ SETUP_GUIDE.md                                    # Step-by-step deployment guide
â”œâ”€â”€ CONTRIBUTING.md                                   # Contribution guidelines
â”œâ”€â”€ CHANGELOG.md                                      # Version history
â”œâ”€â”€ LICENSE                                           # MIT License
â””â”€â”€ .gitignore                                        # Git ignore rules


File Purposes
=============

CORE WORKFLOW FILES
-------------------
.github/workflows/orchestrator.yml
  - Reusable GitHub Actions workflow
  - Accepts 10+ configuration inputs (build commands, branch prefix, etc.)
  - Parses issue labels to determine state/work-type
  - Delegates to composite action

.github/actions/run-gemini-orchestrator/action.yml
  - Composite action that runs the orchestrator
  - Seeds prompt template if missing
  - Calls google-github-actions/run-gemini-cli
  - Commits and pushes generated artifacts

.github/actions/run-gemini-orchestrator/seed/ops/prompts/navratna_orchestrator.md
  - Default AI prompt template
  - Defines state machine behavior (Inception â†’ Discussion â†’ Build â†’ Review â†’ Done)
  - Variable injection syntax (${ISSUE_NUMBER}, ${PROJECT_STATUS}, etc.)
  - Copied to consumer repos if they don't have a custom prompt

AUTOMATION
----------
scripts/bootstrap.sh
  - Automates setup for consumer repos
  - Creates labels via GitHub CLI
  - Adds DevFlow caller workflow
  - Pushes setup branch
  - Prints next steps

DOCUMENTATION
-------------
README.md
  - Overview, quick start, configuration
  - State machine explanation
  - Examples and architecture diagram

SETUP_GUIDE.md
  - Step-by-step deployment instructions
  - Publishing template repo
  - Bootstrapping consumer repos
  - Testing and verification

docs/ARCHITECTURE.md
  - Technical deep dive
  - Data flow diagrams
  - Customization points
  - Security considerations

docs/TROUBLESHOOTING.md
  - Common errors and solutions
  - Debugging tips
  - FAQ

docs/VERSIONING.md
  - Semantic versioning strategy
  - Upgrade procedures
  - Breaking change policy

EXAMPLES
--------
examples/devflow-consumer.yml
  - Copy-paste ready consumer workflow
  - Commented alternatives (npm, yarn, single-package)

examples/custom-prompt-example.md
  - How to customize prompts
  - Domain-specific examples (Backend, Data, DevOps)

METADATA
--------
.github/labels.json
  - Machine-readable label schema
  - Can be imported programmatically

.github/PULL_REQUEST_TEMPLATE.md
  - Standard PR template for consumers to copy

.github/CODEOWNERS
  - Code ownership rules for the template repo

CONTRIBUTING.md
  - How to contribute
  - Development setup
  - Testing procedures
  - Coding standards

CHANGELOG.md
  - Version history
  - Release notes

LICENSE
  - MIT License

.gitignore
  - Standard ignores (OS, IDEs, temp files)


Key Concepts
============

1. REUSABLE WORKFLOW
   Consumer repos call the template workflow via workflow_call.
   Zero code duplication - all logic lives in one place (this repo).

2. COMPOSITE ACTION
   Wraps the Gemini CLI and handles variable mapping, seeding, and commits.

3. SEED PROMPT
   Ships with a default prompt that gets copied to consumer repos automatically.
   Consumer repos can customize by editing ops/prompts/navratna_orchestrator.md.

4. LABEL-DRIVEN STATE MACHINE
   Issues move through states via labels:
   - status:inception â†’ status:discussion â†’ status:build â†’ status:review â†’ status:done
   - Work types: feature, bugfix, refactor, performance, dep-bump, docs, chore

5. VERSIONED RELEASES
   Template is tagged (v1, v1.1, v2, etc.).
   Consumers pin to specific versions and upgrade explicitly.


Usage Flow
==========

1. DEPLOY TEMPLATE
   gh repo create tardis-pro/devflow-gemini --public --source=. --remote=origin
   git push -u origin main
   git tag v1 && git push origin v1

2. BOOTSTRAP CONSUMER REPO
   ./scripts/bootstrap.sh your-org/your-repo

3. ADD SECRET
   gh secret set GEMINI_API_KEY --repo your-org/your-repo

4. MERGE SETUP PR
   gh pr merge setup/devflow --repo your-org/your-repo --squash

5. USE IT
   Create issue â†’ Add labels (status:inception, feature) â†’ Workflow runs â†’ Artifacts generated


Consumer Repo Structure (After Bootstrap)
==========================================

your-repo/
â”œâ”€â”€ .github/
â”‚   â””â”€â”€ workflows/
â”‚       â””â”€â”€ devflow.yml                  # Calls reusable workflow
â”œâ”€â”€ ops/
â”‚   â”œâ”€â”€ prompts/
â”‚   â”‚   â””â”€â”€ navratna_orchestrator.md     # Auto-seeded (or custom)
â”‚   â””â”€â”€ out/
â”‚       â”œâ”€â”€ design-123.md                # Generated artifacts
â”‚       â”œâ”€â”€ impl-plan-456.md
â”‚       â””â”€â”€ review-789.md
â””â”€â”€ [rest of repo files...]


Next Steps for Deployment
==========================

1. Review all files (especially README.md and SETUP_GUIDE.md)
2. Customize branding (replace "tardis-pro" with your org name)
3. Push to GitHub: gh repo create tardis-pro/devflow-gemini --public --source=. --remote=origin
4. Tag v1: git tag v1 && git push origin v1
5. Create release: gh release create v1 --title "v1.0.0" --notes "Initial release"
6. Test with a real repo: ./scripts/bootstrap.sh test-org/test-repo
7. Roll out to production repos

ðŸŽ‰ You're ready to ship!
